#!/usr/bin/bash


release_name=$(echo $0 | cut -d'-' -f1 | cut -d'/' -f2)


if [ -z "$home" ] || [ $(id -u) -ne 0 ]; then
	echo
	echo "Please do not run this script by itself.  Run \"$release_name-setup.sh\" instead."
	exit
fi


script_rel_dir=$(dirname "${BASH_SOURCE[0]}")
cd $script_rel_dir
script_dir=$(pwd)


# Load variables from config file
if [ -f "$home/Setup/$release_name-config" ]; then
	source $home/Setup/$release_name-config
else
	source $script_dir/$release_name-config
fi


function confirm_cmd {
	local cmd="$*"
	if [ -n "$interactive" ]; then
		echo -e "\nAbout to execute command as root...\n    # $cmd"
		read -p 'Proceed? [Y/n] '
		if [ -z "$REPLY" ] || [ "${REPLY,}" == 'y' ]; then
			eval $cmd
		fi
	else
		echo -e "\nExecuting command as root...\n    # $cmd\n"
		eval $cmd
	fi
}


function contains {
	local -n array=$1
	for i in "${array[@]}"; do
		if [ "$i" == "$2" ]; then
			echo $i
		fi
	done
}


if [ "$GRUB_CMDLINE_LINUX_DEFAULT" != 'quiet' ] && [ ! -f "$script_dir/status/grub_set_up" ]; then
	echo
	echo 'Setting up grub...'
	confirm_cmd "sed -i 's/GRUB_CMDLINE_LINUX_DEFAULT.*/GRUB_CMDLINE_LINUX_DEFAULT=\"$GRUB_CMDLINE_LINUX_DEFAULT\"/' /etc/default/grub"
	update_grub=1
	touch "$script_dir/status/grub_set_up"
	touch "$script_dir/status/reboot"
	echo
fi


# Move @rootfs btrfs subvolume to @ for timeshift
if [ -n "$(grep @rootfs /etc/fstab)" ]; then
	echo
	read -p 'Rename the @rootfs btrfs subvolume to @ for timeshift? [Y/n] '
	if [ -z "$REPLY" ] || [ "${REPLY,}" == 'y' ]; then
		dev=$(grep '\s/\s' /etc/mtab | cut -d' ' -f1)
		echo "Detected your / partition is on device: $dev"
		confirm_cmd "mount $dev /mnt"
		confirm_cmd 'mv /mnt/@rootfs /mnt/@'
		confirm_cmd 'umount /mnt'
		confirm_cmd 'sed -i "s/@rootfs/@/" /etc/fstab'
		echo 'Reinstalling grub and updating grub...'
		confirm_cmd "grub-install ${dev:0:$((${#dev}-1))}"
		update_grub=1
		touch "$script_dir/status/reboot"
		echo
		echo '@rootfs btrfs subvolume was renamed to @ for use with timeshift.'
	fi
	echo
fi


if [ -n "$update_grub" ]; then
	confirm_cmd 'update-grub'
fi


# Create @home subvolume if not present, and Copy/merge all user directories to it
if [ -z "$(grep @home /etc/fstab)" ]; then
	echo
	read -p 'Copy/merge the /home directory into an @home btrfs subvolume for timeshift? [Y/n] '
	if [ -z "$REPLY" ] || [ "${REPLY,}" == 'y' ]; then
		dev=$(grep /home /etc/mtab | cut -d' ' -f1)
		echo "Detected your /home partition is on device: $dev"
		confirm_cmd "mount $dev /mnt"
		user_dirs=( $(ls /mnt) )
		if [ ! -d /mnt/@home ]; then
			confirm_cmd "btrfs subvolume create /mnt/@home"
		fi
		for dir in ${user_dirs[@]}; do
			if [ -z "$(echo "$dir" | grep timeshift)" ] && [ "$dir" != '@home' ]; then
				confirm_cmd "cp -a /mnt/$dir /mnt/@home/"
			fi
		done
		confirm_cmd 'umount /mnt'
		confirm_cmd 'sed -i "s|\(.*/home.*btrfs.*\sdefaults\)\s*\(.*\)|\1,subvol=@home \2|" /etc/fstab'
		touch "$script_dir/status/reboot"
		echo
		echo '@home btrfs subvolume was created and all user directories were copied to it.'
	fi
	echo
fi


# Reboot
if [ -f "$script_dir/status/reboot" ]; then
	echo
	echo 'The script needs to reboot your system.  When it is finished rebooting,'
	echo 'please re-run the same script and it will resume from where it left off.'
	echo
	read -p 'Press ENTER to reboot...'
	rm "$script_dir/status/reboot"
	systemctl reboot
	sleep 5
fi


# Remove old home directories in top level of btrfs @home partition
if [ ! -f "$script_dir/status/moved_user_dirs" ]; then
	echo
	read -p 'Check for and remove old copies of user directories (siblings to @home)? [Y/n] '
	if [ -z "$REPLY" ] || [ "${REPLY,}" == 'y' ]; then
		dev=$(grep /home /etc/mtab | cut -d' ' -f1)
		echo "Detected your /home partition is on device: $dev"
		confirm_cmd "mount $dev /mnt"
		user_dirs=( $(ls /mnt) )
		for dir in ${user_dirs[@]}; do
			if [ -z "$(echo "$dir" | grep timeshift)" ] && [ "$dir" != '@home' ]; then
				confirm_cmd "rm -rf /mnt/$dir"
			fi
		done
		confirm_cmd 'umount /mnt'
		sudo -u $SUDO_USER touch "$script_dir/status/moved_user_dirs"
	fi
	echo
fi


# Inhibit suspend if on AC power but not logged in, useful for SSHing into a server
if [ -n "$gdm_inhibit_ac" ] && [ ! -f "$script_dir/status/gdm_inhibited" ]; then
	echo
	echo 'Setting up gdm to stay on when plugged in, but not logged in.'
	echo 'Will still auto-suspend if on battery power...'
	confirm_cmd "sudo sed -i 's/# sleep-inactive-ac-timeout=1200/sleep-inactive-ac-timeout=0/' /etc/gdm3/greeter.dconf-defaults"
	confirm_cmd "sudo sed -i \"s/# sleep-inactive-ac-type='suspend'/sleep-inactive-ac-type='nothing'/\" /etc/gdm3/greeter.dconf-defaults"
	touch "$script_dir/status/gdm_inhibited"
	touch "$script_dir/status/reboot"
	echo
fi


# Purge unwanted packages
if [ -n "${apt_purges[*]}" ] && [ ! -f "$script_dir/status/apt_purged" ]; then
	echo
	echo 'Removing unwanted packages from the base installation...'
	confirm_cmd "apt-get -y purge ${apt_purges[@]}"
	confirm_cmd 'apt-get -y autopurge'
	touch "$script_dir/status/apt_purged"
	echo
fi


# SSD trim after deleting stuff to reclaim unused blocks
if [ -n "$ssd" ] && [ ! -f "$script_dir/status/ssd_set_up" ]; then
	echo
	echo 'SSD setup...'
	confirm_cmd 'fstrim -v /'
	confirm_cmd 'fstrim -v /home'
	confirm_cmd 'echo -e "\\n#Swappiness\\nvm.swappiness=1\\n" >> /etc/sysctl.conf'
	touch "$script_dir/status/ssd_set_up"
fi
echo


# Add contrib and non-free to sources.list (this still works with or without non-free-firmware at the end of the repository list) 
if [ -n "$extra_repos" ] && [ ! -f "$script_dir/status/extra_repos_added" ]; then
	echo
	echo 'Adding extra repositories (contrib, non-free) to sources.list...'
	confirm_cmd "sed -i 's/^\(deb.*$release_name.*main\)/\1 contrib non-free/' /etc/apt/sources.list"
	touch "$script_dir/status/extra_repos_added"
	echo
fi


# Update apt cache (with added repos) and upgrade
# This step is unnecessary for network installs, but needed for live image installs
if [ ! -f "$script_dir/status/apt_upgraded" ]; then
	echo
	echo 'Updating apt cache and upgrading current packages...'
	confirm_cmd 'apt-get update'
	confirm_cmd 'apt-get -y upgrade'
	touch "$script_dir/status/apt_upgraded"
	echo
fi


# Install basic utilities
if [ ! -f "$script_dir/status/basic_utils_installed" ]; then
	echo
	echo 'Installing git, curl, and timeshift...'
	confirm_cmd 'apt-get -y install git curl timeshift'
	touch "$script_dir/status/basic_utils_installed"
	echo
fi


# Inform user to take a snapshot with Timeshift, must use GUI
if [ ! -f "$script_dir/status/initial_snapshot" ]; then
	echo
	echo 'Timeshift must be set up through the GUI before system snapshots can'
	echo 'be taken to rollback a bad update or configuration or installation'
	echo 'of a bad package.  Check the boxes to add monthly and weekly snapshots.'
	echo 'Including @home in snapshots is fine since it has its own subvolume.'
	echo "Take an initial snapshot, comment it with \"Debian ${release_name^} installed\","
	echo 'just in case you screw something up in the rest of the installation... ;)'
	echo 'After it is done snapshotting the system, please close the timeshift window.'
	echo
	read -p 'Press ENTER to open timeshift...'
	confirm_cmd 'timeshift-launcher'
	sudo -u $SUDO_USER touch "$script_dir/status/initial_snapshot"
	echo
fi


# Add i386 (32-bit) libraries if playing Windows games on wine, needed before apt installs
if [ -n "$(contains apt_installs wine)" ] && [ ! -f "$script_dir/status/i386_arch_added" ]; then
	echo
	echo 'Enabling 32-bit libraries for playing Windows games on wine...'
	confirm_cmd dpkg --add-architecture i386
	touch "$script_dir/status/i386_arch_added"
	echo
fi


# Install all apt packages, this step will take a while...
if [ -n "${apt_installs[*]}" ] && [ ! -f "$script_dir/status/apt_packages_installed" ]; then
	echo
	echo 'Installing apt packages...'
	confirm_cmd "apt-get -y install ${apt_installs[@]}"
	touch "$script_dir/status/apt_packages_installed"
	echo
fi


# Inform user to turn on firewall with Gufw; always use protection!
if [ -n "$(contains apt_installs gufw)" ] && [ ! -f "$script_dir/status/gufw_set_up" ]; then
	echo
	echo 'Gufw (Graphical Uncomplicated Firewall) also needs to be set up through'
	echo 'its GUI.  In the Home profile, add a rule to allow all incoming requests'
	echo 'through SSH.'
	echo
	if [ -n "$(contains flatpaks RemoteTouchpad)" ]; then
		echo 'Since you are installing the RemoteTouchpad flatpak, also add a rule'
		echo "to allow all incoming requests for port $remote_touchpad_port as well."
		echo
	fi
	if [ -n "$(contains gnome_extensions gsconnect)" ]; then
		echo 'Since you are installing the GSConnect Gnome extension, also add a rule'
		echo 'to allow all incoming requests for the KDE Connect app as well.'
		echo
	fi
	echo 'Make sure the firewall is turned on before closing the window.'
	echo
	read -p 'Press ENTER to open gufw...'
	confirm_cmd 'gufw'
	touch "$script_dir/status/gufw_set_up"
	echo
fi


# Download, compile, and install NeovimGtk from latest github source release
if [ -n "$install_neovim_gtk" ] && [ ! -f "$script_dir/status/neovim_gtk_installed" ]; then
	echo
	echo 'Installing Rust as root to compile and install NeovimGtk system-wide...'
	confirm_cmd "curl --proto '=https' --tlsv1.2 -sSf https://sh.rustup.rs | sudo -i sh -s -- -y"
	echo
	echo 'Installing NeovimGtk from the latest source code release on GitHub...'
	confirm_cmd "sudo -u $SUDO_USER curl -L https://www.github.com$(curl -s -L https://github.com/Lyude/neovim-gtk/releases/latest | grep 'href=\".*\.zip\"' | cut -d'"' -f2) -o $script_dir/downloads/nvim-gtk-source.zip"
	confirm_cmd "unzip -d $script_dir/downloads $script_dir/downloads/nvim-gtk-source.zip"
	confirm_cmd "sudo -i make -C $script_dir/downloads/neovim-gtk-* install"
	echo
	echo 'Removing Rust installed as root...'
	confirm_cmd 'sudo -i rustup self uninstall -y'
	root=1
	touch "$script_dir/status/neovim_gtk_installed"
	echo
fi


# Install Google Chrome
if [ -n "$install_google_chrome" ] && [ ! -f "$script_dir/status/chrome_installed" ]; then
	echo
	echo 'Installing Google Chrome...'
	confirm_cmd "sudo -u $SUDO_USER curl -L https://dl.google.com/linux/direct/google-chrome-stable_current_amd64.deb -o $script_dir/downloads/chrome.deb"
	confirm_cmd "apt-get -y install $script_dir/downloads/chrome.deb"
	touch "$script_dir/status/chrome_installed"
	echo
fi


# Install Windscribe VPN
if [ -n "$install_windscribe" ] && [ ! -f "$script_dir/status/windscribe_installed" ]; then
	echo
	echo 'Installing Windscribe VPN...'
	confirm_cmd "sudo -u $SUDO_USER curl -L https://windscribe.com/install/desktop/linux_deb_x64/beta -o $script_dir/downloads/windscribe.deb"
	confirm_cmd "apt-get -y install $script_dir/downloads/windscribe.deb"
	touch "$script_dir/status/windscribe_installed"
	echo
fi


# Add private window to context menu for Firefox-ESR launcher
if [ -n "$priv_firefox_launcher" ] && [ ! -f "$script_dir/status/priv_firefox_launcher_added" ]; then
	echo
	echo 'Adding private window to context menu for Firefox-ESR launcher...'
	confirm_cmd 'echo -e "Actions=new-window;new-private-window;\\n\\n[Desktop Action new-window]\\nName=Open a New Window\\nExec=/usr/lib/firefox-esr/firefox-esr -new-window\\n\\n[Desktop Action new-private-window]\\nName=Open a New Private Window\\nExec=/usr/lib/firefox-esr/firefox-esr -private-window\\n" >> /usr/share/applications/firefox-esr.desktop'
	touch "$script_dir/status/priv_firefox_launcher_added"
	echo
fi


# Create launcher to switch between light/dark color schemes
if [ ! -f "$script_dir/status/toggle_colors_script_added" ]; then
	echo
	echo 'Create launcher to toggle light/dark color schemes... (keyboard shortcut: Super + c)'
	confirm_cmd "cp -av $script_dir/toggle-color-scheme /usr/local/bin/"
	confirm_cmd "chmod +x /usr/local/bin/toggle-color-scheme"
	touch "$script_dir/status/toggle_colors_script_added"
	echo
fi


# Copy script into PATH to move system-monitor indicator
if [ -n "$move_system_monitor" ] && [ ! -f "$script_dir/status/move_system_monitor_script_added" ]; then
	echo
	echo 'Copy script into PATH to move Gnome extension system-monitor to the right of all indicators...'
	confirm_cmd "cp -av $script_dir/move-system-monitor /usr/local/bin/"
	confirm_cmd "chmod +x /usr/local/bin/move-system-monitor"
	touch "$script_dir/status/move_system_monitor_script_added"
	echo
fi


# Copy script into PATH to move workspace-indicator
if [ -n "$move_workspace_indicator" ] && [ ! -f "$script_dir/status/move_workspace_indicator_script_added" ]; then
	echo
	echo 'Copy script into PATH to move Gnome extension workspace-indicator to the left panel box...'
	confirm_cmd "cp -av $script_dir/move-workspace-indicator /usr/local/bin/"
	confirm_cmd "chmod +x /usr/local/bin/move-workspace-indicator"
	touch "$script_dir/status/move_workspace_indicator_script_added"
	echo
fi


# DVD
if [ -n "$(contains apt_installs libdvd-pkg)" ] && [ ! -f "$script_dir/status/dvd_set_up" ]; then
	echo
	echo 'Setting up packages to watch DVD movies...'
	confirm_cmd 'dpkg-reconfigure libdvd-pkg'
	touch "$script_dir/status/dvd_set_up"
	echo
fi


# Add Flatpak repository
if [ -n "$(contains apt_installs flatpak)" ] && [ ! -f "$script_dir/status/flatpak_repo_added" ]; then
	echo
	echo 'Adding flathub repo...'
	confirm_cmd 'flatpak remote-add --if-not-exists flathub https://flathub.org/repo/flathub.flatpakrepo'
	touch "$script_dir/status/flatpak_repo_added"
	touch "$script_dir/status/reboot"
	echo
fi
