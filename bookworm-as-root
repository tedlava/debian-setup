#!/usr/bin/bash


delims="${0//[^\/]}"
len=$((${#delims}+1))
release_name=$(echo $0 | cut -d'/' -f$len | cut -d'-' -f1)


if [ -z "$home" ] || [ $(id -u) -ne 0 ]; then
	echo
	echo "Please do not run this script by itself.  Run \"$release_name-setup.sh\" instead."
	exit
fi


script_rel_dir=$(dirname "${BASH_SOURCE[0]}")
cd $script_rel_dir
script_dir=$(pwd)


# Load variables from config file
if [ -f "$home/Setup/$release_name-config" ]; then
	source $home/Setup/$release_name-config
else
	source $script_dir/$release_name-config
fi


function confirm_cmd {
	local cmd="$*"
	if [ -n "$interactive" ]; then
		echo -e "\nAbout to execute command as root...\n    # $cmd"
		read -p 'Proceed? [Y/n] '
		if [ -z "$REPLY" ] || [ "${REPLY,}" == 'y' ]; then
			eval $cmd
		fi
	else
		echo -e "\nExecuting command as root...\n    # $cmd\n"
		eval $cmd
	fi
}


function contains {
	local -n array=$1
	for i in "${array[@]}"; do
		if [ "$i" == "$2" ]; then
			echo $i
		fi
	done
}


# Copy new GRUB_CMDLINE_LINUX_DEFAULT string into /etc/default/grub
if [ "$GRUB_CMDLINE_LINUX_DEFAULT" != 'quiet' ] && [ ! -f "$script_dir/status/basic-installation/grub_set_up" ]; then
	errors=0
	echo
	echo 'Setting up grub...'
	confirm_cmd "sed -i 's/GRUB_CMDLINE_LINUX_DEFAULT.*/GRUB_CMDLINE_LINUX_DEFAULT=\"$GRUB_CMDLINE_LINUX_DEFAULT\"/' /etc/default/grub"
	((errors += $?))
	update_grub=1
	if [ "$errors" -eq 0 ]; then
		if [ -f "$script_dir/status/errors/grub_set_up" ]; then
			rm "$script_dir/status/errors/grub_set_up"
		fi
		sudo -u $SUDO_USER touch "$script_dir/status/basic-installation/grub_set_up"
		reboot=1
	else
		sudo -u $SUDO_USER touch "$script_dir/status/errors/grub_set_up"
	fi
	echo
fi


# Move @rootfs btrfs subvolume to @ for timeshift
errors=0 # Catch errors over the sections that modify /etc/fstab and btrfs subvolumes...
if [ -n "$(grep @rootfs /etc/fstab)" ]; then
	echo
	if [ -n "$interactive" ]; then
		read -p 'Rename the @rootfs btrfs subvolume to @ for timeshift? [Y/n] '
	fi
	if [ -z "$interactive" ] || [ -z "$REPLY" ] || [ "${REPLY,}" == 'y' ]; then
		echo 'Making backup copy of /etc/fstab at /etc/fstab~'
		confirm_cmd 'cp -av /etc/fstab /etc/fstab~'
		((errors += $?))
		dev=$(grep '\s/\s' /etc/mtab | cut -d' ' -f1)
		((errors += $?))
		echo "Detected your / partition is on device: $dev"
		confirm_cmd "mount $dev /mnt"
		((errors += $?))
		confirm_cmd 'mv /mnt/@rootfs /mnt/@'
		((errors += $?))
		confirm_cmd 'umount /mnt'
		((errors += $?))
		confirm_cmd 'sed -i "s/@rootfs/@/" /etc/fstab'
		((errors += $?))
		echo 'Reinstalling grub and updating grub...'
		confirm_cmd "grub-install ${dev:0:$((${#dev}-1))}"
		((errors += $?))
		update_grub=1
		reboot=1
		echo
		echo '@rootfs btrfs subvolume was renamed to @ for use with timeshift.'
	fi
	echo
fi


if [ -n "$update_grub" ]; then
	confirm_cmd 'update-grub'
	((errors += $?))
fi


# Create @home subvolume if not present, and Copy/merge all new user directories from the new installation to it (should just be the main user account)
if [ -z "$(grep @home /etc/fstab)" ]; then
	echo
	if [ -n "$interactive" ]; then
		read -p 'Copy/merge the /home directory into an @home btrfs subvolume for timeshift? [Y/n] '
	fi
	if [ -z "$interactive" ] || [ -z "$REPLY" ] || [ "${REPLY,}" == 'y' ]; then
		dev=$(grep '/home ' /etc/mtab | cut -d' ' -f1)
		((errors += $?))
		echo "Detected your /home partition is on device: $dev"
		confirm_cmd "mount $dev /mnt"
		((errors += $?))
		user_dirs=( $(ls /mnt) )
		((errors += $?))
		if [ ! -d /mnt/@home ]; then
			confirm_cmd "btrfs subvolume create /mnt/@home"
			((errors += $?))
		fi
		for dir in ${user_dirs[@]}; do
			if [ -z "$(echo "$dir" | grep timeshift)" ] && [ "$dir" != '@home' ]; then
				confirm_cmd "cp -a /mnt/$dir /mnt/@home/"
				((errors += $?))
			fi
		done
		confirm_cmd 'umount /mnt'
		((errors += $?))
		confirm_cmd 'sed -i "s|\(.*/home .*btrfs.*\sdefaults\)\s*\(.*\)|\1,subvol=@home \2|" /etc/fstab'
		((errors += $?))
		reboot=1
		echo
		echo '@home btrfs subvolume was created and all user directories were copied to it.'
	fi
	echo
fi


# Handle possible errors from configuring btrfs subvolumes and grub
if [ "$errors" -ne 0 ]; then
	echo
	echo '***** ERRORS occured when configuring btrfs subvolumes and/or grub!  Do *NOT* reboot'
	echo 'your computer since it may not boot properly!  Please check the script output'
	echo 'above, double check your /etc/fstab file, and possibly re-run grub-install'
	echo 'and/or update-grub, if needed, before you proceed with the setup script...'
	echo 'Keep in mind, it is possible your computer partitions and subdirectories might'
	echo 'be set up in a way that is uncommon from a standard Debian installation and'
	echo 'might require further tweaking to get past this part...'
	echo
	echo "$errors"
	read -p 'Press ENTER to exit the script...'
	exit 9
fi


# Reboot
if [ "$reboot" == '1' ]; then
	echo
	echo 'The script needs to reboot your system.  When it is finished rebooting,'
	echo 'please re-run the same script and it will resume from where it left off.'
	echo
	read -p 'Press ENTER to reboot...'
	systemctl reboot
	sleep 5
fi


# Remove old home directories in top level of btrfs @home partition
if [ ! -f "$script_dir/status/basic-installation/moved_user_dirs" ]; then
	errors=0
	echo
	echo 'Removing old copies of user directories (mostly empty, created by installation)...'
	dev=$(grep '/home ' /etc/mtab | cut -d' ' -f1)
	echo "Detected your old /home partition is on device: $dev"
	confirm_cmd "mount $dev /mnt"
	((errors += $?))
	user_dirs=( $(ls /mnt) )
	for dir in ${user_dirs[@]}; do
		if [ -z "$(echo "$dir" | grep timeshift)" ] && [ "$dir" != '@home' ]; then
			echo
			echo 'This directory should have already been copied to the new @home subvolume and can be safely deleted...'
			confirm_cmd "rm -rf /mnt/$dir"
			((errors += $?))
		fi
	done
	confirm_cmd 'umount /mnt'
	((errors += $?))
	if [ "$errors" -eq 0 ]; then
		if [ -f "$script_dir/status/errors/moved_user_dirs" ]; then
			rm "$script_dir/status/errors/moved_user_dirs"
		fi
		sudo -u $SUDO_USER touch "$script_dir/status/basic-installation/moved_user_dirs"
	else
		sudo -u $SUDO_USER touch "$script_dir/status/errors/moved_user_dirs"
	fi
	echo
fi


# Inhibit suspend if on AC power but not logged in, useful for SSHing into a server
if [ -n "$gdm_inhibit_ac" ] && [ ! -f "$script_dir/status/basic-installation/gdm_inhibited" ]; then
	errors=0
	echo
	echo 'Setting up gdm to stay on when plugged in, but not logged in.'
	echo 'Will still auto-suspend if on battery power...'
	confirm_cmd "sed -i 's/# sleep-inactive-ac-timeout=1200/sleep-inactive-ac-timeout=0/' /etc/gdm3/greeter.dconf-defaults"
	((errors += $?))
	confirm_cmd "sed -i \"s/# sleep-inactive-ac-type='suspend'/sleep-inactive-ac-type='nothing'/\" /etc/gdm3/greeter.dconf-defaults"
	((errors += $?))
	if [ "$errors" -eq 0 ]; then
		if [ -f "$script_dir/status/errors/gdm_inhibited" ]; then
			rm "$script_dir/status/errors/gdm_inhibited"
		fi
		sudo -u $SUDO_USER touch "$script_dir/status/basic-installation/gdm_inhibited"
		reboot=1
	else
		sudo -u $SUDO_USER touch "$script_dir/status/errors/gdm_inhibited"
	fi
	echo
fi


# Purge unwanted packages
if [ -n "${apt_purges[*]}" ] && [ ! -f "$script_dir/status/basic-installation/apt_purged" ]; then
	errors=0
	echo
	echo 'Removing unwanted packages from the base installation...'
	confirm_cmd "apt-get -y purge ${apt_purges[@]}"
	((errors += $?))
	confirm_cmd 'apt-get -y autopurge'
	((errors += $?))
	if [ "$errors" -eq 0 ]; then
		if [ -f "$script_dir/status/errors/apt_purged" ]; then
			rm "$script_dir/status/errors/apt_purged"
		fi
		sudo -u $SUDO_USER touch "$script_dir/status/basic-installation/apt_purged"
	else
		sudo -u $SUDO_USER touch "$script_dir/status/errors/apt_purged"
	fi
	echo
fi


# SSD trim after deleting stuff to reclaim unused blocks
if [ -n "$ssd" ] && [ ! -f "$script_dir/status/basic-installation/ssd_set_up" ]; then
	errors=0
	echo
	echo 'SSD setup...'
	confirm_cmd 'fstrim -v /'
	((errors += $?))
	confirm_cmd 'fstrim -v /home'
	((errors += $?))
	confirm_cmd 'echo -e "\\n#Swappiness\\nvm.swappiness=1\\n" >> /etc/sysctl.conf'
	((errors += $?))
	if [ "$errors" -eq 0 ]; then
		if [ -f "$script_dir/status/errors/ssd_set_up" ]; then
			rm "$script_dir/status/errors/ssd_set_up"
		fi
		sudo -u $SUDO_USER touch "$script_dir/status/basic-installation/ssd_set_up"
	else
		sudo -u $SUDO_USER touch "$script_dir/status/errors/ssd_set_up"
	fi
	echo
fi


# Add contrib and non-free to sources.list (this still works with or without non-free-firmware at the end of the repository list)
if [ -n "$extra_repos" ] && [ ! -f "$script_dir/status/basic-installation/extra_repos_added" ]; then
	errors=0
	echo
	echo 'Adding extra repositories (contrib, non-free) to sources.list...'
	confirm_cmd "sed -i 's/^\(deb.*$release_name.*main\)/\1 contrib non-free/' /etc/apt/sources.list"
	((errors += $?))
	if [ "$errors" -eq 0 ]; then
		if [ -f "$script_dir/status/errors/extra_repos_added" ]; then
			rm "$script_dir/status/errors/extra_repos_added"
		fi
		sudo -u $SUDO_USER touch "$script_dir/status/basic-installation/extra_repos_added"
	else
		sudo -u $SUDO_USER touch "$script_dir/status/errors/extra_repos_added"
	fi
	echo
fi


# Add i386 (32-bit) libraries if playing Windows games on wine, needed before apt installs
if [ -n "$(contains apt_installs wine)" ] && [ ! -f "$script_dir/status/basic-installation/i386_arch_added" ]; then
	errors=0
	echo
	echo 'Enabling 32-bit libraries for playing Windows games on wine...'
	confirm_cmd dpkg --add-architecture i386
	((errors += $?))
	if [ "$errors" -eq 0 ]; then
		if [ -f "$script_dir/status/errors/i386_arch_added" ]; then
			rm "$script_dir/status/errors/i386_arch_added"
		fi
		sudo -u $SUDO_USER touch "$script_dir/status/basic-installation/i386_arch_added"
	else
		sudo -u $SUDO_USER touch "$script_dir/status/errors/i386_arch_added"
	fi
	echo
fi


# Update apt cache (with added repos) and upgrade
# This step is unnecessary for network installs, but needed for live image installs
if [ ! -f "$script_dir/status/basic-installation/apt_upgraded" ]; then
	errors=0
	echo
	echo 'Updating apt cache and upgrading current packages...'
	confirm_cmd 'apt-get update'
	((errors += $?))
	confirm_cmd 'apt-get -y upgrade'
	((errors += $?))
	if [ "$errors" -eq 0 ]; then
		if [ -f "$script_dir/status/errors/apt_upgraded" ]; then
			rm "$script_dir/status/errors/apt_upgraded"
		fi
		sudo -u $SUDO_USER touch "$script_dir/status/basic-installation/apt_upgraded"
	else
		sudo -u $SUDO_USER touch "$script_dir/status/errors/apt_upgraded"
	fi
	echo
fi


# Install git, curl, and timeshift
if [ ! -f "$script_dir/status/basic-installation/basic_utils_installed" ]; then
	errors=0
	echo
	echo 'Installing git, curl, and timeshift...'
	confirm_cmd 'apt-get -y install git curl timeshift'
	((errors += $?))
	if [ "$errors" -eq 0 ]; then
		if [ -f "$script_dir/status/errors/basic_utils_installed" ]; then
			rm "$script_dir/status/errors/basic_utils_installed"
		fi
		sudo -u $SUDO_USER touch "$script_dir/status/basic-installation/basic_utils_installed"
	else
		sudo -u $SUDO_USER touch "$script_dir/status/errors/basic_utils_installed"
	fi
	echo
fi


# Inform user to take initial snapshot with Timeshift, must use GUI
if [ ! -f "$script_dir/status/basic-installation/initial_snapshot" ]; then
	errors=0
	echo
	echo 'Timeshift must be set up through the GUI before automatic system snapshots'
	echo 'can be taken to rollback a bad update or configuration or installation'
	echo 'of a bad package.  Check the boxes to add monthly and weekly snapshots.'
	echo 'Including @home in snapshots is NOT recommended, since it will act like an'
	echo 'extended Trash can, and take 2 months for something to finally be deleted.'
	echo 'Additionally, you cannot "empty the trash can" easily with Timeshift snapshots.'
	echo
	echo "Take an initial snapshot, comment it with \"Debian ${release_name^} installed\","
	echo 'just in case you screw something up in the rest of the installation, you can'
	echo 'always restore it back to this initial state, and try again...'
	echo 'After it is done snapshotting the system, please close the timeshift window.'
	echo
	read -p 'Press ENTER to open timeshift...'
	confirm_cmd 'timeshift-launcher'
	((errors += $?))
	if [ "$errors" -eq 0 ]; then
		if [ -f "$script_dir/status/errors/initial_snapshot" ]; then
			rm "$script_dir/status/errors/initial_snapshot"
		fi
		sudo -u $SUDO_USER touch "$script_dir/status/basic-installation/initial_snapshot"
	else
		sudo -u $SUDO_USER touch "$script_dir/status/errors/initial_snapshot"
	fi
	echo
fi


# Install all apt packages, this step will take a while...
if [ -n "${apt_installs[*]}" ] && [ ! -f "$script_dir/status/apt_packages_installed" ]; then
	errors=0
	echo
	echo 'Installing apt packages...'
	confirm_cmd "apt-get -y install ${apt_installs[@]}"
	((errors += $?))
	if [ "$errors" -eq 0 ]; then
		if [ -f "$script_dir/status/errors/apt_packages_installed" ]; then
			rm "$script_dir/status/errors/apt_packages_installed"
		fi
		sudo -u $SUDO_USER touch "$script_dir/status/apt_packages_installed"
	else
		sudo -u $SUDO_USER touch "$script_dir/status/errors/apt_packages_installed"
	fi
	echo
fi


# Inform user to turn on firewall with Gufw; always use protection!
if [ -n "$(contains apt_installs gufw)" ] && [ ! -f "$script_dir/status/gufw_set_up" ]; then
	errors=0
	echo
	echo 'Gufw (Graphical Uncomplicated Firewall) also needs to be set up through'
	echo 'its GUI.  In the Home profile, add a rule to allow all incoming requests'
	echo 'through SSH.'
	echo
	if [ -n "$(echo "${flatpaks[@]}" | grep -o RemoteTouchpad)" ]; then
		echo 'Since you are installing the RemoteTouchpad flatpak, also add a rule'
		echo "to allow all incoming requests for port $remote_touchpad_port as well."
		echo
	fi
	if [ -n "$(echo "${gnome_extensions[@]}" | grep -o gsconnect)" ]; then
		echo 'Since you are installing the GSConnect Gnome extension, also add a rule'
		echo 'to allow all incoming requests for the KDE Connect app as well.'
		echo
	fi
	echo 'Make sure the firewall is turned on before closing the window.'
	echo
	read -p 'Press ENTER to open gufw...'
	confirm_cmd 'gufw'
	((errors += $?))
	if [ "$errors" -eq 0 ]; then
		if [ -f "$script_dir/status/errors/gufw_set_up" ]; then
			rm "$script_dir/status/errors/gufw_set_up"
		fi
		sudo -u $SUDO_USER touch "$script_dir/status/gufw_set_up"
	else
		sudo -u $SUDO_USER touch "$script_dir/status/errors/gufw_set_up"
	fi
	echo
fi


# DVD
if [ -n "$(contains apt_installs libdvd-pkg)" ] && [ ! -f "$script_dir/status/dvd_set_up" ]; then
	errors=0
	echo
	echo 'Setting up packages to watch DVD movies...'
	confirm_cmd 'dpkg-reconfigure libdvd-pkg'
	((errors += $?))
	if [ "$errors" -eq 0 ]; then
		if [ -f "$script_dir/status/errors/dvd_set_up" ]; then
			rm "$script_dir/status/errors/dvd_set_up"
		fi
		sudo -u $SUDO_USER touch "$script_dir/status/dvd_set_up"
	else
		sudo -u $SUDO_USER touch "$script_dir/status/errors/dvd_set_up"
	fi
	echo
fi


# Add Flathub repository
if [ -n "$(contains apt_installs flatpak)" ] && [ ! -f "$script_dir/status/flatpak_repo_added" ]; then
	errors=0
	echo
	echo 'Adding flathub repo...'
	confirm_cmd 'flatpak remote-add --if-not-exists flathub https://flathub.org/repo/flathub.flatpakrepo'
	((errors += $?))
	if [ "$errors" -eq 0 ]; then
		if [ -f "$script_dir/status/errors/flatpak_repo_added" ]; then
			rm "$script_dir/status/errors/flatpak_repo_added"
		fi
		sudo -u $SUDO_USER touch "$script_dir/status/flatpak_repo_added"
		reboot=1
	else
		sudo -u $SUDO_USER touch "$script_dir/status/errors/flatpak_repo_added"
	fi
	echo
fi


# Download, compile, and install NeovimGtk from latest github source release
if [ -n "$install_neovim_gtk" ] && [ ! -f "$script_dir/status/neovim_gtk_installed" ]; then
	errors=0
	echo
	echo 'Installing Rust as root to compile and install NeovimGtk system-wide...'
	confirm_cmd "curl --proto '=https' --tlsv1.2 -sSf https://sh.rustup.rs | sh -s -- -y"
	((errors += $?))
	confirm_cmd "source '/root/.cargo/env'"
	((errors += $?))
	echo
	echo 'Installing NeovimGtk from the latest source code release on GitHub...'
	confirm_cmd "sudo -u $SUDO_USER curl -L https://github.com$(curl -s -L "$(curl -s -L https://github.com/Lyude/neovim-gtk/releases/latest | grep -o '"https://.*expanded_assets.*"' | cut -d'"' -f2)" | grep -o 'href=.*.zip' | cut -d'"' -f2) -o $script_dir/tmp/nvim-gtk-source.zip"
	((errors += $?))
	confirm_cmd "sudo -u $SUDO_USER unzip -d $script_dir/tmp $script_dir/tmp/nvim-gtk-source.zip"
	((errors += $?))
	confirm_cmd "make -C $script_dir/tmp/neovim-gtk-* install"
	((errors += $?))
	if [ ! -d '/root/.config' ]; then
		confirm_cmd 'mkdir /root/.config'
		((errors += $?))
	fi
	if [ ! -d '/root/.config/nvim' ]; then
		confirm_cmd 'mkdir /root/.config/nvim'
		((errors += $?))
	fi
	echo
	echo 'Add very basic init.vim configuration for root...'

	confirm_cmd 'echo -e "set number\\nset mouse=a\\nset clipboard=unnamedplus\\nset cursorline\\nset background=dark\\nhi Comment cterm=italic\\nset termguicolors\\ncolorscheme darkblue" > /root/.config/nvim/init.vim'
	((errors += $?))
	echo
	echo 'Removing Rust installed as root...'
	confirm_cmd 'rustup self uninstall -y'
	((errors += $?))
	echo
	echo 'NeovimGtk installation as root successful, cleaning up root-owned tmp files...'
	confirm_cmd "rm -rf $script_dir/tmp/neovim-gtk-*"
	((errors += $?))
	if [ "$errors" -eq 0 ]; then
		if [ -f "$script_dir/status/errors/neovim_gtk_installed" ]; then
			rm "$script_dir/status/errors/neovim_gtk_installed"
		fi
		sudo -u $SUDO_USER touch "$script_dir/status/neovim_gtk_installed"
	else
		sudo -u $SUDO_USER touch "$script_dir/status/errors/neovim_gtk_installed"
	fi
	echo
fi


# Install Google Chrome
if [ -n "$install_google_chrome" ] && [ ! -f "$script_dir/status/chrome_installed" ]; then
	errors=0
	echo
	echo 'Installing Google Chrome...'
	confirm_cmd "sudo -u $SUDO_USER curl -L https://dl.google.com/linux/direct/google-chrome-stable_current_amd64.deb -o $script_dir/tmp/chrome.deb"
	((errors += $?))
	confirm_cmd "apt-get -y install $script_dir/tmp/chrome.deb"
	((errors += $?))
	if [ "$errors" -eq 0 ]; then
		if [ -f "$script_dir/status/errors/chrome_installed" ]; then
			rm "$script_dir/status/errors/chrome_installed"
		fi
		sudo -u $SUDO_USER touch "$script_dir/status/chrome_installed"
	else
		sudo -u $SUDO_USER touch "$script_dir/status/errors/chrome_installed"
	fi
	echo
fi


# Install Windscribe VPN
if [ -n "$install_windscribe" ] && [ ! -f "$script_dir/status/windscribe_installed" ]; then
	errors=0
	echo
	echo 'Installing Windscribe VPN...'
	confirm_cmd "sudo -u $SUDO_USER curl -L https://windscribe.com/install/desktop/linux_deb_x64/beta -o $script_dir/tmp/windscribe.deb"
	((errors += $?))
	confirm_cmd "apt-get -y install $script_dir/tmp/windscribe.deb"
	((errors += $?))
	if [ "$errors" -eq 0 ]; then
		if [ -f "$script_dir/status/errors/windscribe_installed" ]; then
			rm "$script_dir/status/errors/windscribe_installed"
		fi
		sudo -u $SUDO_USER touch "$script_dir/status/windscribe_installed"
	else
		sudo -u $SUDO_USER touch "$script_dir/status/errors/windscribe_installed"
	fi
	echo
fi


# Add private window to context menu for Firefox-ESR launcher
if [ -n "$priv_firefox_launcher" ] && [ ! -f "$script_dir/status/priv_firefox_launcher_added" ]; then
	errors=0
	echo
	echo 'Adding private window to context menu for Firefox-ESR launcher...'
	confirm_cmd 'echo -e "Actions=new-window;new-private-window;\\n\\n[Desktop Action new-window]\\nName=Open a New Window\\nExec=/usr/lib/firefox-esr/firefox-esr -new-window\\n\\n[Desktop Action new-private-window]\\nName=Open a New Private Window\\nExec=/usr/lib/firefox-esr/firefox-esr -private-window\\n" >> /usr/share/applications/firefox-esr.desktop'
	((errors += $?))
	if [ "$errors" -eq 0 ]; then
		if [ -f "$script_dir/status/errors/priv_firefox_launcher_added" ]; then
			rm "$script_dir/status/errors/priv_firefox_launcher_added"
		fi
		sudo -u $SUDO_USER touch "$script_dir/status/priv_firefox_launcher_added"
	else
		sudo -u $SUDO_USER touch "$script_dir/status/errors/priv_firefox_launcher_added"
	fi
	echo
fi


# Configure Firefox-ESR to use Wayland, if available
if [ -z "$(echo "${apt_installs[@]}" | grep -o nvidia)" ] && [ ! -f "script_dir/status/wayland_firefox" ]; then
	errors=0
	echo
	echo 'Adding environment variable to allow Firefox to use Wayland (prevents black screen on application start up)...'
	confirm_cmd 'echo "MOZ_ENABLE_WAYLAND=1" >> /etc/environment'
	((errors += $?))
	if [ "$errors" -eq 0 ]; then
		if [ -f "$script_dir/status/errors/wayland_firefox" ]; then
			rm "$script_dir/status/errors/wayland_firefox"
		fi
		sudo -u $SUDO_USER touch "$script_dir/status/wayland_firefox"
	else
		sudo -u $SUDO_USER touch "$script_dir/status/errors/wayland_firefox"
	fi
	echo
fi


# Create launcher to switch between light/dark color color schemes in Gnome with Super+c
if [ ! -f "$script_dir/status/toggle_colors_script_added" ]; then
	errors=0
	echo
	echo 'Create launcher to toggle light/dark color schemes... (keyboard shortcut: Super + c)'
	confirm_cmd "cp -av $script_dir/toggle-color-scheme /usr/local/bin/"
	((errors += $?))
	confirm_cmd "chmod +x /usr/local/bin/toggle-color-scheme"
	((errors += $?))
	if [ "$errors" -eq 0 ]; then
		if [ -f "$script_dir/status/errors/toggle_colors_script_added" ]; then
			rm "$script_dir/status/errors/toggle_colors_script_added"
		fi
		sudo -u $SUDO_USER touch "$script_dir/status/toggle_colors_script_added"
	else
		sudo -u $SUDO_USER touch "$script_dir/status/errors/toggle_colors_script_added"
	fi
	echo
fi


# Copy script into PATH to move system-monitor indicator
if [ -n "$move_system_monitor" ] && [ ! -f "$script_dir/status/move_system_monitor_script_added" ]; then
	errors=0
	echo
	echo 'Copy script into PATH to move Gnome extension system-monitor to the right of all indicators...'
	confirm_cmd "cp -av $script_dir/move-system-monitor /usr/local/bin/"
	((errors += $?))
	confirm_cmd "chmod +x /usr/local/bin/move-system-monitor"
	((errors += $?))
	if [ "$errors" -eq 0 ]; then
		if [ -f "$script_dir/status/errors/move_system_monitor_script_added" ]; then
			rm "$script_dir/status/errors/move_system_monitor_script_added"
		fi
		sudo -u $SUDO_USER touch "$script_dir/status/move_system_monitor_script_added"
	else
		sudo -u $SUDO_USER touch "$script_dir/status/errors/move_system_monitor_script_added"
	fi
	echo
fi


# Copy script into PATH to move workspace-indicator
if [ -n "$move_workspace_indicator" ] && [ ! -f "$script_dir/status/move_workspace_indicator_script_added" ]; then
	errors=0
	echo
	echo 'Copy script into PATH to move Gnome extension workspace-indicator to the left panel box...'
	confirm_cmd "cp -av $script_dir/move-workspace-indicator /usr/local/bin/"
	((errors += $?))
	confirm_cmd "chmod +x /usr/local/bin/move-workspace-indicator"
	((errors += $?))
	if [ "$errors" -eq 0 ]; then
		if [ -f "$script_dir/status/errors/move_workspace_indicator_script_added" ]; then
			rm "$script_dir/status/errors/move_workspace_indicator_script_added"
		fi
		sudo -u $SUDO_USER touch "$script_dir/status/move_workspace_indicator_script_added"
	else
		sudo -u $SUDO_USER touch "$script_dir/status/errors/move_workspace_indicator_script_added"
	fi
	echo
fi


# Use exit code 93 if reboot flag variable is 1; Debian was created in 1993!
if [ "$reboot" == '1' ]; then
	exit 93
fi
