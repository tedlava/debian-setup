#!/usr/bin/bash


if [ -z "$release_name" ] || [ -z "$home" ] || [ -z "$interactive" ] || [ $(id -u) -ne 0 ]; then
	echo 'Please do not run this script by itself.  It must be run from another script.'
	exit
fi


function confirm_cmd {
	local cmd="$*"
	if [ -n $interactive ]; then
		echo -e "\nAbout to execute command as root...\n    # $cmd"
		read -p 'Proceed? [Y/n] '
	fi
	if [ -z $interactive ] || [ -z "$REPLY" ] || [ "${REPLY,}" == 'y' ]; then
		echo -e "\nExecuting command as root...\n    # $cmd\n"
		eval $cmd
	fi
}


# Move @rootfs btrfs subvolume to @ for timeshift
if [ -n "$(grep @rootfs /etc/fstab)" ]; then
	read -p 'Rename the @rootfs btrfs subvolume to @ for timeshift? [Y/n] '
	if [ -z "$REPLY" ] || [ "${REPLY,}" == 'y' ]; then
		dev=$(grep '\s/\s' /etc/mtab | cut -d' ' -f1)
		echo "Detected your / partition is on device: $dev"
		confirm_cmd "mount $dev /mnt"
		confirm_cmd 'mv /mnt/@rootfs /mnt/@'
		confirm_cmd 'umount /mnt'
		confirm_cmd 'sed -i "s/@rootfs/@/" /etc/fstab'
		echo 'Reinstalling grub and updating grub...'
		confirm_cmd "grub-install ${dev:0:$((${#dev}-1))}"
		confirm_cmd 'update-grub'
		fixed_btrfs=1
		echo '@rootfs btrfs subvolume was renamed to @ for use with timeshift.'
		echo
	fi
fi
# Create @home subvolume if not present, and move all user directories to it
if [ -z "$(grep @home /etc/fstab)" ]; then
	read -p 'Move /home directory into an @home btrfs subvolume for timeshift? [Y/n] '
	if [ -z "$REPLY" ] || [ "${REPLY,}" == 'y' ]; then
		dev=$(grep /home /etc/mtab | cut -d' ' -f1)
		echo "Detected your /home partition is on device: $dev"
		confirm_cmd "mount $dev /mnt"
		user_dirs=( $(ls /mnt) )
		confirm_cmd "btrfs subvolume create /mnt/@home"
		for dir in ${user_dirs[@]}; do
			if [ "$dir" != '@home' ]; then
				confirm_cmd "cp -a /mnt/$dir /mnt/@home/"
			fi
		done
		confirm_cmd 'umount /mnt'
		confirm_cmd 'sed -i "s|\(.*/home.*btrfs.*\sdefaults\)\s*\(.*\)|\1,subvol=@home \2|" /etc/fstab'
		fixed_btrfs=1
		echo '@home btrfs subvolume was created and all user directories were copied to it.'
		echo
	fi
fi
if [ -n "$fixed_btrfs" ]; then
	echo
	echo 'Btrfs partitions have been modified.  The script needs to reboot your system.'
	echo 'When it is finished rebooting, please re-run the same script and it will'
	echo 'resume from where it left off.'
	echo
	if [ -n "$wayland" ]; then
		echo
		echo '    *** Please switch to "Gnome on Xorg" when you login next time!'
		echo
	fi
	read -p 'Press ENTER to reboot...'
	systemctl reboot
fi


# Remove old home directories in top level of btrfs @home partition
read -p 'Check for and remove old copies of user directories (siblings to @home)? [Y/n] '
if [ -z "$REPLY" ] || [ "${REPLY,}" == 'y' ]; then
	dev=$(grep /home /etc/mtab | cut -d' ' -f1)
	echo "Detected your /home partition is on device: $dev"
	confirm_cmd "mount $dev /mnt"
	user_dirs=( $(ls /mnt) )
	for dir in ${user_dirs[@]}; do
		if [ "$dir" != '@home' ]; then
			confirm_cmd "rm -rf /mnt/$dir"
		fi
	done
	confirm_cmd 'umount /mnt'
fi


# Add contrib and non-free to sources.list
echo
read -p 'Add contrib and non-free repositories to your /etc/apt/sources.list? [Y/n] '
if [ -z "$REPLY" ] || [ "${REPLY,}" == 'y' ]; then
	confirm_cmd "sed -i 's/^\(deb.*$release_name.*main\)$/\1 contrib non-free/' /etc/apt/sources.list"
fi


# Update/upgrade for base packages first
echo
echo 'Updating apt cache...'
echo
confirm_cmd 'apt-get update'
echo
read -p 'Upgrade packages? [Y/n] '
if [ -z "$REPLY" ] || [ "${REPLY,}" == 'y' ]; then
	confirm_cmd 'apt-get -y upgrade'
fi
echo


# Install basic utilities
echo
echo 'Installing rsync, git, curl, timeshift, and gufw...'
echo
confirm_cmd 'apt-get -y install rsync git curl timeshift gufw'
echo


# Inform user to take a snapshot with Timeshift, must use GUI
echo
echo 'Timeshift must be set up through the GUI before system snapshots can'
echo 'be taken to rollback a bad update or configuration or installation'
echo 'of a bad package.  Only use timeshift to snapshot the @ subvolume.'
echo 'Check the boxes to add monthly and weekly snapshots as well.  All'
echo 'other default settings should be sufficient.  Take an initial snapshot'
echo "and give it a title like \"Debian ${release_name^} installed\", just in case you"
echo 'screw something up in the rest of the installation... ;)  After it is'
echo 'done snapshotting the system, you may close the timeshift window.'
echo
read -p 'Press ENTER to open timeshift...'
confirm_cmd 'timeshift-launcher'
echo


# Inform user to turn on firewall with Gufw, must use GUI
echo
echo 'Gufw (Graphical Uncomplicated Firewall) also needs to be set up through'
echo 'its GUI.  In the Home profile, add a rule to allow all incoming requests'
echo 'through SSH.  Make sure the firewall is turned on before closing the window.'
echo
read -p 'Press ENTER to open gufw...'
confirm_cmd 'gufw'


# SSD
echo
read -p 'Did you install Debian to an SSD? [Y/n] '
if [ -z "$REPLY" ] || [ "${REPLY,}" == 'y' ]; then
	echo -e "\nTrimming to recover some disk space..."
	confirm_cmd 'fstrim -v /'
	confirm_cmd 'fstrim -v /home'
	echo 'Changing swappiness for SSD...'
	confirm_cmd 'echo -e "\\n#Swappiness\\nvm.swappiness=1\\n" >> /etc/sysctl.conf'
	echo 'It is also highly recommended that you modify your web browser settings'
	echo 'to prevent unnecessary writing to your SSD to extend its life.'
fi
echo


# Purge unwanted packages
echo
echo 'Removing unwanted packages from the base installation...'
confirm_cmd 'apt-get -y purge evolution'
confirm_cmd 'apt-get -y autopurge'
echo


# Backports
echo
read -p 'Do you want to enable backports? (newer kernel for newer hardware) [y/N] '
if [ "${REPLY,}" == 'y' ]; then
	confirm_cmd "echo -e \"\\n# Backports\\ndeb http://deb.debian.org/debian ${release_name}-backports main contrib non-free\" >> /etc/apt/sources.list"
	confirm_cmd 'apt-get update'
	echo
	read -p 'Do you want to install the latest kernel from backports? [y/N] '
	if [ "${REPLY,}" == 'y' ]; then
		backports=" -t ${release_name}-backports "
		confirm_cmd "apt-get -y $backports install linux-image-amd64"
	else
		backports=''
	fi
fi
echo


# Kernel headers
echo
read -p 'Do you want to install the Linux headers? (required for NVIDIA drivers) [y/N] '
if [ "${REPLY,}" == 'y' ]; then
	confirm_cmd "apt-get -y $backports install linux-headers-amd64"
fi
echo


# Firmware
echo
echo 'What firmware packages do you need?'
echo
firmware=''
read -p '    firmware-misc-nonfree? [Y/n] '
if [ "$REPLY" == '' ] || [ "${REPLY,}" == 'y' ]; then
	firmware="$firmware firmware-misc-nonfree"
fi
read -p '    intel-microcode? [Y/n] '
if [ "$REPLY" == '' ] || [ "${REPLY,}" == 'y' ]; then
	firmware="$firmware intel-microcode"
fi
read -p '    amd64-microcode? [y/N] '
if [ "${REPLY,}" == 'y' ]; then
	firmware="$firmware amd64-microcode"
fi
read -p '    firmware-realtek? [y/N] '
if [ "${REPLY,}" == 'y' ]; then
	firmware="$firmware firmware-realtek"
fi
read -p '    firmware-atheros? [y/N] '
if [ "${REPLY,}" == 'y' ]; then
	firmware="$firmware firmware-atheros"
fi
read -p '    firmware-iwlwifi? [y/N] '
if [ "${REPLY,}" == 'y' ]; then
	firmware="$firmware firmware-iwlwifi"
fi
echo 'Please enter the package names (as they appear in the Debian repositories) of'
echo 'any other firmware not listed above that you would like to install now'
echo '(separated by spaces).'
echo
read -p 'Input extra firmware package names here, ENTER when finished: '
if [ -n "$REPLY" ]; then
	firmware="$firmware $REPLY"
fi

if [ "$firmware" != '' ]; then
	confirm_cmd "apt-get -y $backports install $firmware"
fi
echo


# GDM auto-suspend disabled
# Can this be done more efficiently? I don't like the output of "No protocol specified"
echo
echo 'Setting up gdm to stay on when plugged in, but not logged in.'
echo 'Will still auto-suspend if on battery power...'
echo
confirm_cmd "sudo -u Debian-gdm dbus-launch gsettings set org.gnome.settings-daemon.plugins.power sleep-inactive-ac-type 'nothing'"
echo


# TLP for better battery life on laptops
echo
read -p 'Do you want to install TLP for better battery life on laptops? [Y/n] '
if [ "$REPLY" == '' ] || [ "${REPLY,}" == 'y' ]; then
	confirm_cmd "apt-get -y $backports install tlp tlp-rdw"
fi
echo


# Plymouth graphical boot up
echo
echo 'Installing Plymouth for graphical boot...'
echo
confirm_cmd 'apt-get -y install plymouth'
echo
echo 'Do you want to add any extra parameters to /etc/default/grub'
echo 'GRUB_CMDLINE_LINUX_DEFAULT ? "splash" will already be added.'
echo '   For example, pci=noaer'
echo
read -p 'Input your parameters here, ENTER when finished: '
if [ "$REPLY" != '' ]; then
	grub=" $REPLY"
fi
confirm_cmd "sed -i 's/GRUB_CMDLINE_LINUX_DEFAULT.*/GRUB_CMDLINE_LINUX_DEFAULT=\"quiet splash$grub\"/' /etc/default/grub"
echo
confirm_cmd 'update-grub'
echo


# Install other system utilities
echo
echo 'Installing flatpak, vlc, and codecs...'
echo
confirm_cmd 'apt-get -y install flatpak gnome-software-plugin-flatpak vlc libavcodec-extra ipython3 catfish gir1.2-gtop-2.0'
confirm_cmd 'flatpak remote-add --if-not-exists flathub https://flathub.org/repo/flathub.flatpakrepo'
echo


# DVD
echo
read -p 'Will you be using a DVD drive with this computer, internal or external? [y/N] '
if [ "$REPLY" == '' ] || [ "${REPLY,}" == 'y' ]; then
	confirm_cmd 'apt-get -y install libdvd-pkg'
	confirm_cmd 'dpkg-reconfigure libdvd-pkg'
fi
echo


# Install DropBox
echo
read -p 'Install DropBox? (free account limits sync to 3 computers) [Y/n] '
if [ "$REPLY" == '' ] || [ "${REPLY,}" == 'y' ]; then
	confirm_cmd 'apt-get -y install nautilus-dropbox'
fi
echo


# Install Windscribe VPN
echo
read -p 'Install Windscribe? [Y/n] '
if [ "$REPLY" == '' ] || [ "${REPLY,}" == 'y' ]; then
	confirm_cmd "curl -L https://windscribe.com/install/desktop/linux_deb_x64/beta -o $home/windscribe.deb"
	confirm_cmd "apt-get -y install $home/windscribe.deb"
	confirm_cmd "rm $home/windscribe.deb"
fi
echo


# Install apps via apt
echo
echo 'Installing gimp, inkscape, gnucash, wine, and neovim dependencies...'
echo
confirm_cmd 'apt-get -y install python3-neovim xclip gimp gimp-data-extras inkscape inkscape-open-symbols gnucash python3-gnucash wine'
echo


# Install Neovim
echo
echo 'Installing Neovim...'
echo

# Check all available versions in release, if greater than 0.4, install from apt, else download and install from github latest release!
nvim_ver=$(apt list neovim -a 2>/dev/null | grep neovim | cut -d' ' -f2 | cut -c1-3 | sort | tail -n1)

if [ $nvim_ver '>' '0.4' ]; then
	echo
	confirm_cmd 'apt-get -y install neovim'
	echo
else
	echo
	echo 'Neovim version is too old in apt, downloading from github...'
	echo
	confirm_cmd "curl -L https://www.github.com$(curl -s -L https://github.com/neovim/neovim/releases/latest | grep 'href=\".*\.deb\"' | cut -d'\"' -f2) -o $home/nvim-github-latest-release.deb"
	confirm_cmd "apt-get -y install $home/nvim-github-latest-release.deb"
	confirm_cmd "rm $home/nvim-github-latest-release.deb"
fi


# NVIDIA drivers
if [ "$(lspci | grep -i nvidia)" != '' ]; then
	echo
	echo 'Found nvidia graphics card...'
	echo
	confirm_cmd 'apt-get -y install nvidia-detect'
	echo
	echo 'Here is a list of possible nvidia drivers:'
	echo
	confirm_cmd 'apt list nvidia-*driver 2>/dev/null'
	echo
	echo 'Here is what nvidia-detect recommends:'
	confirm_cmd 'nvidia-detect'
	echo
	echo 'Please enter the name of the nvidia-driver package you'
	read -p 'want to install: '
	confirm_cmd dpkg --add-architecture i386
	confirm_cmd "apt-get -y install $REPLY"
	echo
fi

