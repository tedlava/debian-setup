#!/usr/bin/bash


release_name=$(echo $0 | cut -d'-' -f1 | cut -d'/' -f2)


if [ -z "$home" ] || [ $(id -u) -ne 0 ]; then
	echo
	echo "Please do not run this script by itself.  Run \"$release_name-setup.sh\" instead."
	exit
fi


script_rel_dir=$(dirname "${BASH_SOURCE[0]}")
cd $script_rel_dir
script_dir=$(pwd)


# Load variables from config file
if [ -f "$home/Setup/$release_name-config" ]; then
	source $home/Setup/$release_name-config
else
	source $script_dir/$release_name-config
fi


function confirm_cmd {
	local cmd="$*"
	if [ -n "$interactive" ]; then
		echo -e "\nAbout to execute command as root...\n    # $cmd"
		read -p 'Proceed? [Y/n] '
		if [ -z "$REPLY" ] || [ "${REPLY,}" == 'y' ]; then
			eval $cmd
		fi
	else
		echo -e "\nExecuting command as root...\n    # $cmd\n"
		eval $cmd
	fi
}


function contains {
	local -n array=$1
	for i in "${array[@]}"; do
		if [ "$i" == "$2" ]; then
			echo $i
		fi
	done
}


# Move @rootfs btrfs subvolume to @ for timeshift
if [ -n "$(grep @rootfs /etc/fstab)" ]; then
	echo
	read -p 'Rename the @rootfs btrfs subvolume to @ for timeshift? [Y/n] '
	if [ -z "$REPLY" ] || [ "${REPLY,}" == 'y' ]; then
		dev=$(grep '\s/\s' /etc/mtab | cut -d' ' -f1)
		echo "Detected your / partition is on device: $dev"
		confirm_cmd "mount $dev /mnt"
		confirm_cmd 'mv /mnt/@rootfs /mnt/@'
		confirm_cmd 'umount /mnt'
		confirm_cmd 'sed -i "s/@rootfs/@/" /etc/fstab'
		echo 'Reinstalling grub and updating grub...'
		confirm_cmd "grub-install ${dev:0:$((${#dev}-1))}"
		confirm_cmd 'update-grub'
		reboot=1
		echo '@rootfs btrfs subvolume was renamed to @ for use with timeshift.'
	fi
	echo
fi


# Create @home subvolume if not present, and move all user directories to it
if [ -z "$(grep @home /etc/fstab)" ]; then
	echo
	read -p 'Move /home directory into an @home btrfs subvolume for timeshift? [Y/n] '
	if [ -z "$REPLY" ] || [ "${REPLY,}" == 'y' ]; then
		dev=$(grep /home /etc/mtab | cut -d' ' -f1)
		echo "Detected your /home partition is on device: $dev"
		confirm_cmd "mount $dev /mnt"
		user_dirs=( $(ls /mnt) )
		if [ ! -d /mnt/@home ]; then
			confirm_cmd "btrfs subvolume create /mnt/@home"
		fi
		for dir in ${user_dirs[@]}; do
			if [ -z "$(echo "$dir" | grep timeshift)" ] && [ "$dir" != '@home' ]; then
				confirm_cmd "cp -a /mnt/$dir /mnt/@home/"
			fi
		done
		confirm_cmd 'umount /mnt'
		confirm_cmd 'sed -i "s|\(.*/home.*btrfs.*\sdefaults\)\s*\(.*\)|\1,subvol=@home \2|" /etc/fstab'
		reboot=1
		echo '@home btrfs subvolume was created and all user directories were copied to it.'
	fi
	echo
fi


if [ -n "$reboot" ]; then
	echo
	echo 'The script needs to reboot your system.  When it is finished rebooting,'
	echo 'please re-run the same script and it will resume from where it left off.'
	echo
	if [ -n "$wayland" ]; then
		echo
		echo '    *** Please switch to "Gnome on Xorg" when you login next time!'
		echo
	fi
	read -p 'Press ENTER to reboot...'
	systemctl reboot
	sleep 5
fi


# Remove old home directories in top level of btrfs @home partition
if [ ! -f "$status_dir/moved_user_dirs" ]; then
	echo
	read -p 'Check for and remove old copies of user directories (siblings to @home)? [Y/n] '
	if [ -z "$REPLY" ] || [ "${REPLY,}" == 'y' ]; then
		dev=$(grep /home /etc/mtab | cut -d' ' -f1)
		echo "Detected your /home partition is on device: $dev"
		confirm_cmd "mount $dev /mnt"
		user_dirs=( $(ls /mnt) )
		for dir in ${user_dirs[@]}; do
			if [ -z "$(echo "$dir" | grep timeshift)" ] && [ "$dir" != '@home' ]; then
				confirm_cmd "rm -rf /mnt/$dir"
			fi
		done
		confirm_cmd 'umount /mnt'
		sudo -u $SUDO_USER touch "$status_dir/moved_user_dirs"
	fi
	echo
fi


# Remove old configuration in .dotfiles
if [ ! -f "$status_dir/dotfiles_removed" ]; then
	echo
	read -p 'Do you want to delete all old .dotfiles from your home directory? [Y/n] '
	if [ -z "$REPLY" ] || [ "${REPLY,}" == 'y' ]; then
		confirm_cmd "rm -rf $home/.*"
		confirm_cmd "sudo -u $SUDO_USER cp -av /etc/skel/. $home/"
		sudo -u $SUDO_USER touch "$status_dir/dotfiles_removed"
		reboot=1
	fi
	echo
fi


# Disable suspend while on AC power
if [ ! -f "$status_dir/disabled_ac_suspend" ]; then
	echo
	echo 'Disable suspend while on AC power...'
	confirm_cmd "sudo -u $SUDO_USER gsettings set org.gnome.settings-daemon.plugins.power sleep-inactive-ac-type 'nothing'"
	sudo -u $SUDO_USER touch "$status_dir/disabled_ac_suspend"
fi


# Upgrade to new release
if [ ! -f "$status_dir/upgraded_to_$release_name" ]; then

	# Purge unwanted packages
	echo
	echo 'Removing unwanted packages from the base installation...'
	confirm_cmd "apt-get -y purge ${apt_purges[@]}"
	confirm_cmd 'apt-get -y autopurge'
	echo


	# Update/upgrade for stable packages first
	echo
	echo 'Updating apt cache and upgrading current packages...'
	confirm_cmd 'apt-get update'
	confirm_cmd 'apt-get -y upgrade'
	echo


	# Install basic utilities
	echo
	echo 'Installing git, curl, and timeshift...'
	confirm_cmd 'apt-get -y install git curl timeshift'
	echo


	# Get stable release name first
	while read line; do
		old_release="$(echo "$line" | grep '^deb ' | cut -d' ' -f3 | grep -v [#-])"
		if [ -n "$old_release" ]; then
			break
		fi
	done < /etc/apt/sources.list
	

	# Inform user to take a snapshot with Timeshift, must use GUI
	echo
	echo 'Timeshift must be set up through the GUI before system snapshots can'
	echo 'be taken to rollback a bad update or configuration or installation'
	echo 'of a bad package.  Only use timeshift to snapshot the @ subvolume.'
	echo 'Check the boxes to add monthly and weekly snapshots as well.  All'
	echo 'other default settings should be sufficient.  Take an initial snapshot'
	echo "and give it a title like \"Debian ${old_release^} installed\", just in case you"
	echo 'screw something up in the rest of the installation... ;)  After it is'
	echo 'done snapshotting the system, you may close the timeshift window.'
	echo
	read -p 'Press ENTER to open timeshift...'
	confirm_cmd 'timeshift-launcher'
	echo


	# SSD
	if [ -n "$ssd" ]; then
		echo
		echo 'SSD setup...'
		confirm_cmd 'fstrim -v /'
		confirm_cmd 'fstrim -v /home'
		confirm_cmd 'echo -e "\\n#Swappiness\\nvm.swappiness=1\\n" >> /etc/sysctl.conf'
	fi
	echo


	# Switch to new repositories
	echo
	echo "Switching to $release_name repositories in /etc/apt/sources.list ..."
	echo
	confirm_cmd "grep '^deb.* $old_release .*' /etc/apt/sources.list > sources.list"
	confirm_cmd "sed -i 's/$old_release/$release_name/' sources.list"
	confirm_cmd 'mv -v sources.list /etc/apt/sources.list'


	# Add contrib and non-free to sources.list
	if [ -n "$extra_repos" ]; then
		echo
		echo 'Adding extra repositories (contrib, non-free) to sources.list...'
		confirm_cmd "sed -i 's/^\(deb.*$release_name.*main\)$/\1 contrib non-free/' /etc/apt/sources.list"
	fi


	# Update/upgrade to new release
	echo
	echo "Updating apt cache from $old_release repositories and dist-upgrading to $release_name..."
	confirm_cmd 'apt-get update'
	confirm_cmd 'apt-get -y dist-upgrade'
	sudo -u $SUDO_USER touch "$status_dir/upgraded_to_$release_name"
	echo
	echo 'The script needs to reboot your system.  When it is finished rebooting,'
	echo 'please re-run the same script and it will resume from where it left off.'
	echo
	if [ -n "$wayland" ]; then
		echo
		echo '    *** Please switch to "Gnome on Xorg" when you login next time!'
		echo
	fi
	read -p 'Press ENTER to reboot...'
	systemctl reboot
	sleep 5
fi


# Create timeshift snapshot after booting into new release for the first time
confirm_cmd "timeshift --create --comments 'Debian ${release_name^} installed' --yes"


# Inhibit suspend if on AC power but not logged in
if [ -n "$gdm_inhibit_ac" ]; then
	echo
	echo 'Setting up gdm to stay on when plugged in, but not logged in.'
	echo 'Will still auto-suspend if on battery power...'
	confirm_cmd "sudo -u Debian-gdm dbus-launch gsettings set org.gnome.settings-daemon.plugins.power sleep-inactive-ac-type 'nothing'"
	echo
fi


# Install i386 (32-bit) libraries?  Useful for playing Windows games on wine
if [ -n "$(contains apt_installs wine)" ]; then
	echo
	echo 'Enabling 32-bit libraries for playing Windows games on wine...'
	confirm_cmd dpkg --add-architecture i386
	echo
fi


# Install Windscribe VPN
if [ -n "$install_windscribe" ]; then
	echo
	echo 'Installing Windscribe VPN...'
	confirm_cmd "sudo -u $SUDO_USER curl -L https://windscribe.com/install/desktop/linux_deb_x64/beta -o $script_dir/downloads/windscribe.deb"
	confirm_cmd "apt-get -y install $script_dir/downloads/windscribe.deb"
	echo
fi


if [ -n "${apt_installs[*]}" ]; then
	echo
	echo 'Installing apt packages...'
	confirm_cmd "apt-get -y install ${apt_installs[@]}"
	echo
fi


# DVD
if [ -n "$(contains apt_installs libdvd-pkg)" ]; then
	echo
	echo 'Setting up packages to watch DVD movies...'
	confirm_cmd 'dpkg-reconfigure libdvd-pkg'
	echo
fi


if [ "$GRUB_CMDLINE_LINUX_DEFAULT" != 'quiet' ]; then
	echo
	echo 'Setting up grub...'
	confirm_cmd "sed -i 's/GRUB_CMDLINE_LINUX_DEFAULT.*/GRUB_CMDLINE_LINUX_DEFAULT=\"$GRUB_CMDLINE_LINUX_DEFAULT\"/' /etc/default/grub"
	confirm_cmd 'update-grub'
	echo
fi


# Install other system utilities
if [ -n "$(contains apt_installs flatpak)" ]; then
	echo
	echo 'Adding flathub repo...'
	confirm_cmd 'flatpak remote-add --if-not-exists flathub https://flathub.org/repo/flathub.flatpakrepo'
	echo
fi


# Inform user to turn on firewall with Gufw, must use GUI
if [ -n "$(contains apt_installs gufw)" ]; then
	echo
	echo 'Gufw (Graphical Uncomplicated Firewall) also needs to be set up through'
	echo 'its GUI.  In the Home profile, add a rule to allow all incoming requests'
	echo 'through SSH.  Make sure the firewall is turned on before closing the window.'
	echo
	read -p 'Press ENTER to open gufw...'
	confirm_cmd 'gufw'
	echo
fi


# Add private window to context menu for Firefox-ESR launcher
if [ -n "$priv_firefox_launcher" ]; then
	echo
	echo 'Adding private window to context menu for Firefox-ESR launcher...'
	confirm_cmd 'echo -e "Actions=new-window;new-private-window;\\n\\n[Desktop Action new-window]\\nName=Open a New Window\\nExec=/usr/lib/firefox-esr/firefox-esr -new-window\\n\\n[Desktop Action new-private-window]\\nName=Open a New Private Window\\nExec=/usr/lib/firefox-esr/firefox-esr -private-window\\n" >> /usr/share/applications/firefox-esr.desktop'
	echo
fi

